// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vessel {
  id                          Int                @id @default(autoincrement())
  name                        String
  lengthFt                    Int
  make                        String?
  model                       String?
  yearBuilt                   Int?
  hourlyRate                  Float
  cashValue                   Float?
  numOfCabins                 Int?
  numOfBathrooms             Int?
  numOfShowers               Int?
  sleepsNum                  Int?
  numOfPassengers            Int?
  category                   String?
  description                String?            @db.Text
  status                     String?
  features                   String[]
  active                     Boolean?
  featured                   Boolean?
  crewRequired               Boolean?
  dayCharter                 Boolean?
  termCharter                Boolean?
  anchorManaged              Boolean?
  displayTitle               String?
  youtubeLink                String?
  specialInstructions        String?            @db.Text
  parkingNotes               String?            @db.Text
  instructionsAndRules       String?            @db.Text
  notes                      String?            @db.Text
  depositAmount              Float?
  fuelIncluded               Boolean?
  fuelBillingRate            Float?
  fuelReimbursementRate      Float?
  fuelPayeeType              String?
  primaryCaptainId           Int?
  ownerId                    Int?
  
  // Pricing fields
  halfDayPrice               Float?
  fullDayPrice               Float?
  additionalHours            Float?
  halfDayListPrice           Float?
  fullDayListPrice           Float?
  additionalHoursListPrice   Float?

  // Additional fields missing from current schema
  insurancePhoto          String?
  primaryPhoto            String?
  primaryPhotoAbsPath     String?
  hullId                  String?
  dockInfo                String?
  charterLOS              Boolean?
  charterAgreementUrl     String?
  charterAgreementUploadDate DateTime?
  ownerEmail              String?
  insurancePhotoAbsPath   String?
  featuredOrder           Int?
  adminBuyflowTitle1      String?
  adminBuyflowTitle2      String?
  adminBuyflowText1       String?  @db.Text
  adminBuyflowText2       String?  @db.Text
  calendarId              String?
  calendarSummary         String?
  calendarSyncToken       String?
  listBoat                Boolean?

  // Relations
  owner                      Owner?             @relation(fields: [ownerId], references: [id])
  mooringLocation           MooringLocation?
  vesselImages              VesselImage[]
  vesselRates               VesselRate[]
  vesselCaptains            VesselCaptainMap[]
  waterBodies               VesselWaterBodyMap[]
  unavailableDates          VesselUnavailability[]
  buyflows                  Buyflow[]
  bookings                  Booking[]
  productOfferings          ProductOffering[] @relation("VesselProductOffering")

  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
}

model Owner {
  id              Int       @id @default(autoincrement())
  firstName       String?
  lastName        String?
  email           String?   @unique
  phoneNumber     String?
  mailingAddress  String?
  city            String?
  state           String?
  zip             String?
  approved        Boolean   @default(false)
  userId          Int       @unique
  publicId        String    @unique
  vessels         Vessel[]
  user            User      @relation(fields: [userId], references: [id])

  // Additional fields missing from current schema
  fullName               String?
  googleId               String?
  googleAccessToken      String?
  googleRefreshToken     String?
}

model User {
  id                    Int       @id @default(autoincrement())
  username              String    @unique
  email                 String    @unique
  password              String
  firstName             String?
  lastName              String?
  phoneNumber           String?
  birthday              DateTime?
  profileAbsPath        String?
  status               String?
  phoneConfirmed       Boolean   @default(false)
  stripeConnectComplete Boolean   @default(false)
  owner                Owner?
  captain              Captain?
  bookings             Booking[]

  // Additional fields missing from current schema
  acceptedAnchorCode      Boolean   @default(false)
  profileRelPath          String?
  resetPasswordToken      String?
  resetPasswordExpires    DateTime?
  enrollmentConfirmationToken String?
  enrollmentConfirmationExpires DateTime?
  emailVerificationToken  String?
  emailTokenExpires      DateTime?
  emailVerified          Boolean?
  phoneCode              Int?
  signupComplete         Boolean   @default(false)
  firebaseToken          String?
  paypalEmail            String?
  streetSecond           String?
  googleId               String?
  googleAccessToken      String?
  googleRefreshToken     String?
  facebookId             String?
  facebookAccessToken    String?
  facebookSignedRequestCode String?
  facebookDeleteDataRequest String?
  verificationSessionId  String?
  verifiedStatus         String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  verificationChecks UserVerificationCheck[]

  // Add these new fields for username validation
  usernameValidated    Boolean   @default(false)
  usernameValidatedAt  DateTime?
  previousUsernames    String[]  // Track username history
  usernameChangeCount  Int       @default(0)
  lastUsernameChange   DateTime?
  bannedUsernames      String[]  // Optional: track banned usernames for this user

  usernameHistories UsernameHistory[]
}

model Captain {
  id                Int       @id @default(autoincrement())
  status            String?
  uscgLicensed      Boolean   @default(false)
  uscgLicenseNumber String?
  licenseExpDate    String?
  licenseType       String?
  description       String?   @db.Text
  hireRate          Float?
  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id])
  vessels           VesselCaptainMap[]
  bookings          Booking[]

  // Additional fields
  street            String?
  streetSecond      String?
  city              String?
  state             String?
  zip               String?
  captainForHire    Boolean?
  anchorAcademy     Boolean?
  listBoat          Boolean?
  previousExperience String?   @db.Text
  resumeUrl         String?
  licenseUrl        String?
  licenseKey        Json?
  primaryCrewId     Int?
  
  // ICA related fields
  icaSignature      String?
  icaType          String?
  icaDate          DateTime?
  
  // Academy related fields
  academyQualified  Boolean?
  academyStatusId   Int?
  drugInfoId        Int?
  personalInfoId    Int?

  // Availability and preferences as JSON
  availability      Json?
  preferredVessels  Json?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model MooringLocation {
  id                    Int     @id @default(autoincrement())
  vesselId             Int     @unique
  address              String?
  lat                  Float?
  long                 Float?
  parkingAddress       String?
  parkingLat           Float?
  parkingLong          Float?
  vessel               Vessel  @relation(fields: [vesselId], references: [id])

  // Additional fields missing from current schema
  mooringAddressComponents Json?
  parkingAddressComponents Json?
}

model VesselImage {
  id          Int      @id @default(autoincrement())
  url         String
  resourceKey String?
  thumbUrl    String?
  thumbKey    String?
  vesselId    Int
  sortOrder   Int?
  needsCrop   Boolean  @default(false)
  vessel      Vessel   @relation(fields: [vesselId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VesselRate {
  id                Int      @id @default(autoincrement())
  name              String?
  halfDayRate       Float?
  fullDayRate       Float?
  hourlyRate        Float?
  customRate        Float?
  rateType          String?
  ratePayee         String?
  generatePayouts   Boolean  @default(true)
  vesselId          Int
  vessel            Vessel   @relation(fields: [vesselId], references: [id])

  // Additional fields missing from current schema
  taxPercentage           Float?
  markupPercentage        Float?
  percentageBasedRatePercent Float?
  percentBasedOn          String?
  payToUserId             Int?
}

model VesselCaptainMap {
  vesselId   Int
  captainId  Int
  vessel     Vessel    @relation(fields: [vesselId], references: [id])
  captain    Captain   @relation(fields: [captainId], references: [id])

  @@id([vesselId, captainId])
}

model VesselWaterBodyMap {
  vesselId        Int
  waterBodyId     Int
  featuredVessel  Boolean   @default(false)
  vessel          Vessel    @relation(fields: [vesselId], references: [id])

  @@id([vesselId, waterBodyId])
}

model ProductOffering {
  id                    Int      @id @default(autoincrement())
  vesselId             Int
  duration             Int      // in hours
  openAvailability     Boolean  @default(true)
  availabilityStartTime String
  availabilityEndTime   String
  discount             Float    @default(0)
  premium              Float    @default(0)
  advanceNoticeMinHours Int     @default(3)
  hoursBetween         Int     @default(1)
  customAvailabilityTimes Json?
  price                Float?   // can be null
  fromCalendarPref     Boolean  @default(false)
  selectableTimes      String[] // Array of available time slots
  requiredAddOns       Json?    // Array of required add-ons
  optionalAddOns       Json?    // Array of optional add-ons
  
  // Days are already correctly modeled
  monday               Boolean  @default(true)
  tuesday              Boolean  @default(true)
  wednesday            Boolean  @default(true)
  thursday             Boolean  @default(true)
  friday               Boolean  @default(true)
  saturday             Boolean  @default(true)
  sunday               Boolean  @default(true)

  // Relations
  vessel               Vessel   @relation(fields: [vesselId], references: [id], name: "VesselProductOffering")
  lineItems           LineItem[]
  buyflows             Buyflow[]
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

enum LineItemType {
  CLEANING
  CAPTAIN
  OWNER
  BOOKING_FEE
}

model LineItem {
  id                   Int           @id @default(autoincrement())
  productOfferingId    Int
  name                 LineItemType  // Using enum instead of String
  price                Float
  estimatedTax         Float         @default(0)
  originalPrice        Float
  
  productOffering      ProductOffering @relation(fields: [productOfferingId], references: [id])
}

model VesselUnavailability {
  id          Int      @id @default(autoincrement())
  vesselId    Int
  startTime   DateTime
  endTime     DateTime
  reason      String?  // Optional reason for unavailability
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  vessel      Vessel   @relation(fields: [vesselId], references: [id])

  @@index([vesselId, startTime, endTime]) // Index for faster availability lookups
}

model Buyflow {
  id                Int      @id @default(autoincrement())
  vesselId          Int
  productOfferingId Int
  status            String   // e.g., "pending", "completed", "cancelled"
  step              Int     // Current step in buyflow
  totalPrice        Float
  booking           Booking?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  vessel            Vessel   @relation(fields: [vesselId], references: [id])
  productOffering   ProductOffering @relation(fields: [productOfferingId], references: [id])
  buyflowItems      BuyflowItem[]

  // Add these new fields
  userVerified      Boolean  @default(false)
  userVerifiedAt    DateTime?
  verificationNotes String?  @db.Text
  phoneVerified     Boolean  @default(false)
  emailVerified     Boolean  @default(false)
  identityVerified  Boolean  @default(false)
  
  // Optional: Add verification requirements
  requirePhoneVerification  Boolean  @default(true)
  requireEmailVerification Boolean  @default(true)
  requireIdentityVerification Boolean @default(true)

  verificationChecks UserVerificationCheck[]
}

model BuyflowItem {
  id               Int      @id @default(autoincrement())
  buyflowId        Int
  itemType         String   // e.g., "cleaning", "captain", "insurance"
  amount           Float
  required         Boolean  @default(true)
  selected         Boolean  @default(false)
  
  // Relations
  buyflow          Buyflow  @relation(fields: [buyflowId], references: [id])
}

model Booking {
  id                Int      @id @default(autoincrement())
  vesselId          Int
  userId            Int      // Customer who made the booking
  captainId         Int?     // Optional if captain is assigned
  buyflowId         Int      @unique // Reference to the buyflow that created this booking
  status            BookingStatus
  startTime         DateTime
  endTime           DateTime
  totalAmount       Float
  depositPaid       Boolean  @default(false)
  depositAmount     Float?
  specialRequests   String?  @db.Text
  apiToken          String?  // Token for API authentication
  apiResponse       Json?    // Store API response data
  apiStatus         String?  // Status of the API request
  apiErrorMessage   String?  // Error message from API, if any
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  vessel            Vessel   @relation(fields: [vesselId], references: [id])
  user              User     @relation(fields: [userId], references: [id])
  captain           Captain? @relation(fields: [captainId], references: [id])
  buyflow           Buyflow  @relation(fields: [buyflowId], references: [id])
  payments          Payment[]

  @@index([vesselId, startTime, endTime])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  REFUNDED
}

model Payment {
  id               Int      @id @default(autoincrement())
  bookingId        Int
  amount           Float
  status           PaymentStatus
  paymentMethod    String   // e.g., "credit_card", "paypal"
  transactionId    String?  // External payment processor ID
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  booking          Booking  @relation(fields: [bookingId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model UserVerificationCheck {
  id                Int      @id @default(autoincrement())
  userId            Int
  buyflowId         Int
  verificationType  VerificationType
  status            VerificationStatus
  attemptedAt       DateTime @default(now())
  completedAt       DateTime?
  failureReason     String?  @db.Text
  ipAddress         String?
  deviceInfo        String?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id])
  buyflow           Buyflow  @relation(fields: [buyflowId], references: [id])
}

enum VerificationType {
  PHONE
  EMAIL
  IDENTITY
  AGE
  PAYMENT_METHOD
}

enum VerificationStatus {
  PENDING
  PASSED
  FAILED
  EXPIRED
}

// Optionally, we could add a separate model for username history
model UsernameHistory {
  id            Int      @id @default(autoincrement())
  userId        Int
  oldUsername   String
  newUsername   String
  changedAt     DateTime @default(now())
  reason        String?
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId, changedAt])
} 